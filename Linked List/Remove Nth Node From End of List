Problem:
Given the head of a linked list, remove the nth node from the end of the list and return its head.
Follow up: Could you do this in one pass?

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz


Solution:

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(!head->next){
            delete head;
            return NULL;
        }
        if(!head){
            return NULL;
        }
        ListNode* slow = head;
        ListNode* fast = head;
        int temp = n;
        while(fast && temp){
            fast = fast->next;
            temp--;
        }
        if(!fast){
            ListNode* del = slow;
            head = head->next;
            delete slow;
            return head;
          
        }
        while(fast && fast->next){
            fast = fast->next;
            slow = slow->next;
        }
        ListNode* del = slow->next;
        slow->next = slow->next->next;
        delete del;
        return head;
        
    }
};
